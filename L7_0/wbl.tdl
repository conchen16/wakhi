;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of wbl
;;; created at:
;;;     Sat Feb 13 01:44:23 UTC 2021
;;; based on Matrix customization system version of:
;;;     Fri Feb  5 21:00:23 UTC 2021
;;;
;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

basic-head-comp-phrase :+ [ SYNSEM.LIGHT - ].

head :+ [ PRON bool,
    AUX bool,
    POSSESSOR poss,
    SPEC-INIT bool,
    FORM form ].

+nd :+ [ CASE case ].

png :+ [ PER person,
    NUM number ].

cat :+ [ POSSESSUM poss ].

poss := *top* &
  [ POSS-AGR png ].

basic-bare-np-phrase :+ [ SYNSEM.LOCAL.CAT [ VAL.SPEC < >,
                       HEAD #head,
                       POSSESSUM #possessum ],
    HEAD-DTR.SYNSEM.LOCAL.CAT [ HEAD #head,
                                POSSESSUM #possessum & nonpossessive ] ].

basic-head-1st-comp-phrase :+ [ SYNSEM.LOCAL.CAT.POSSESSUM #poss,
    HEAD-DTR.SYNSEM.LOCAL.CAT.POSSESSUM #poss ].

basic-head-opt-subj-phrase :+ [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

basic-determiner-lex :+ [ SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR nonpossessive,
                       POSSESSUM nonpossessive ] ].

poss-case := case.

top-coord-rule :+ [ SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                       POSSESSUM #possessum ],
    RCOORD-DTR.SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                                  POSSESSUM #possessum ],
    LCOORD-DTR.SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                                  POSSESSUM #possessum ] ].

mid-coord-rule :+ [ SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                       POSSESSUM #possessum ],
    RCOORD-DTR.SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                                  POSSESSUM #possessum ],
    LCOORD-DTR.SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                                  POSSESSUM #possessum ] ].

bottom-coord-phrase :+ [ SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                       POSSESSUM #possessum ],
    NONCONJ-DTR.SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                                   POSSESSUM #possessum ] ].

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Case

case := *top*.
real-case := case.  ; intermediate case type for all real cases
nom := real-case.  ; nom
acc := real-case.  ; acc
all := real-case.  ; all
obl := real-case & gen+obl.  ; obl
dat := real-case.  ; dat
abl := real-case.  ; abl
gen := real-case & gen+obl.  ; gen
pro := real-case.  ; prox
gen+obl := case.

;;; Person

person := *top*.
1st-or-3rd := person.
1st := 1st-or-3rd.
2nd := person.
3rd := 1st-or-3rd.

;;; Number

number := *top*.
pl := number.
sg := number.

;;; Possession

possession := *top*.
possessive := poss.  ; supertype for possessive features
nonpossessive := poss.  ; type for nonpossessive
possessor := possessive.
possessum := possessive.
possessive-1 := possessive.  ; supertype for strategy 1
possessor-1 := possessor & possessive-1.
possessum-1 := possessum & possessive-1.

;;; Possession

possessive-pron-1 := possessive.  ; supertype for strategy pron-1
possessor-pron-1 := possessor & possessive-pron-1.
possessum-pron-1 := possessum & possessive-pron-1.

;;; Form

form := *top*.
nonfinite := form.
finite := form.

;;; Tense

npst := tense.
fut := tense.
pst := tense.
plpf := tense.
present := tense.

;;; Aspect

cmpl := aspect.
pfv := aspect.
no-aspect := aspect.

;;; Mood

oblig := mood.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

noun-lex := basic-noun-lex & basic-non-wh-word-lex & non-local-none-lex-item & no-hcons-lex-item & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < #spr &
                                 [ LOCAL.CAT.HEAD det ] >,
                           COMPS < >,
                           SUBJ < >,
                           SPEC < > ],
    ARG-ST < #spr > ].

no-spr-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPR < [ OPT + ] > ].

; Nouns which cannot take specifiers mark their SPR requirement
; as OPT +.  Making the non-head daughter OPT - in this rule
; keeps such nouns out.
; 
; Rules for building NPs.  Note that the Matrix uses SPR for
; the specifier of nouns and SUBJ for the subject (specifier) of verbs.

head-spec-phrase := basic-head-spec-phrase & head-final &
  [ NON-HEAD-DTR.SYNSEM [ OPT -,
                          LOCAL.CAT.VAL.SPEC < [ LOCAL.CAT.POSSESSUM #poss ] > ],
    HEAD-DTR.SYNSEM.LOCAL.CAT.POSSESSUM #poss ].

noun1-noun-lex := noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG [ PER 3rd,
                                         NUM sg ] ] ].

noun2-noun-lex := noun-lex &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG [ PER 3rd,
                                         NUM pl ],
                   CAT.HEAD [ PRON +,
                              CASE obl ] ] ].

noun3-noun-lex := noun-lex &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG [ PER 3rd,
                                         NUM sg ],
                   CAT.HEAD [ PRON +,
                              CASE obl ] ] ].

noun5-noun-lex := noun-lex & noun-pc8-rule-dtr &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

noun7-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

noun8-noun-lex := noun-lex & noun-pc8-rule-dtr &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

noun9-noun-lex := noun-lex & noun-pc13-or-noun-pc2-rule-dtr & noun-pc16-rule-dtr & noun-pc3-rule-dtr & noun-pc5-rule-dtr &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

noun10-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

Common_Nouns-noun-lex := noun-lex & noun-pc13-or-noun-pc2-rule-dtr & noun-pc16-rule-dtr & noun-pc3-rule-dtr & noun-pc5-rule-dtr &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

noun22-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

noun25-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

noun26-noun-lex := noun-lex & noun-pc13-or-noun-pc2-rule-dtr & noun-pc16-rule-dtr & noun-pc3-rule-dtr & noun-pc5-rule-dtr &
  [ SYNSEM.LOCAL.CAT.HEAD.PRON + ].

noun27-noun-lex := noun-lex & noun-pc13-or-noun-pc2-rule-dtr & noun-pc16-rule-dtr & noun-pc3-rule-dtr & noun-pc5-rule-dtr &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG [ PER 2nd,
                                         NUM pl ],
                   CAT.HEAD [ PRON +,
                              CASE nom ] ] ].

noun28-noun-lex := noun-lex & noun-pc13-or-noun-pc2-rule-dtr & noun-pc16-rule-dtr & noun-pc3-rule-dtr & noun-pc5-rule-dtr &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG [ PER 1st,
                                         NUM sg ],
                   CAT.HEAD [ PRON +,
                              CASE obl ] ] ].

noun29-noun-lex := noun-lex & noun-pc13-or-noun-pc2-rule-dtr & noun-pc16-rule-dtr & noun-pc3-rule-dtr & noun-pc5-rule-dtr &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG [ PER 1st,
                                         NUM pl ],
                   CAT.HEAD [ PRON +,
                              CASE nom ] ] ].

noun30-noun-lex := noun-lex & noun-pc13-or-noun-pc2-rule-dtr & noun-pc16-rule-dtr & noun-pc3-rule-dtr & noun-pc5-rule-dtr &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG [ PER 2nd,
                                         NUM pl ],
                   CAT.HEAD [ PRON +,
                              CASE gen+obl ] ] ].

noun31-noun-lex := noun-lex & noun-pc13-or-noun-pc2-rule-dtr & noun-pc16-rule-dtr & noun-pc3-rule-dtr & noun-pc5-rule-dtr &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG [ PER 2nd,
                                         NUM sg ],
                   CAT.HEAD [ PRON +,
                              CASE obl ] ] ].

noun32-noun-lex := noun-lex & noun-pc13-or-noun-pc2-rule-dtr & noun-pc16-rule-dtr & noun-pc3-rule-dtr & noun-pc5-rule-dtr &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG [ PER 2nd,
                                         NUM sg ],
                   CAT.HEAD [ PRON +,
                              CASE nom ] ] ].

noun33-noun-lex := noun-lex & noun-pc13-or-noun-pc2-rule-dtr & noun-pc16-rule-dtr & noun-pc3-rule-dtr & noun-pc5-rule-dtr &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG [ PER 1st,
                                         NUM sg ],
                   CAT.HEAD [ PRON +,
                              CASE nom ] ] ].

noun34-noun-lex := noun-lex & noun-pc13-or-noun-pc2-rule-dtr & noun-pc16-rule-dtr & noun-pc3-rule-dtr & noun-pc5-rule-dtr &
  [ SYNSEM.LOCAL.CAT.HEAD.PRON + ].

noun35-noun-lex := noun-lex & noun-pc13-or-noun-pc2-rule-dtr & noun-pc16-rule-dtr & noun-pc3-rule-dtr & noun-pc5-rule-dtr &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG [ PER 1st,
                                         NUM sg ],
                   CAT.HEAD [ PRON +,
                              CASE gen ] ] ].

Names-noun-lex := no-spr-noun-lex.

Reflexive-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.PRON + ].

2SG_obl_noun-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD [ PRON +,
                              CASE obl ],
                   CONT.HOOK.INDEX.PNG [ NUM sg,
                                         PER 2nd ] ] ].

poss-pron1-noun-lex := non-local-none-lex-item &
  [ SYNSEM [ LKEYS.ALTKEYREL #altkeyrel & noun-relation &
                             [ PRED "pron_rel",
                               LBL #ltop,
                               ARG0 #possessor &
                                    [ COG-ST activ-or-more,
                                      SPECI + ] ],
             LOCAL [ CONT [ HOOK [ INDEX #possessor,
                                   LTOP #ltop ],
                            RELS.LIST < #altkeyrel >,
                            HCONS.LIST < > ],
                     CAT [ VAL [ SPR < [ LOCAL.CAT.HEAD det,
                                         OPT + ] >,
                                 COMPS olist,
                                 SUBJ olist,
                                 SPEC < > ],
                           HEAD noun &
                                [ PRON +,
                                  POSSESSOR possessor-pron-1,
                                  CASE poss-case ] ] ] ] ].

1SG_GEN-noun-lex := poss-pron1-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ NUM sg,
                                       PER 1st ] ].

;;; Verbs

verb-lex := non-mod-lex-item & verb-pc20-rule-dtr &
  [ SYNSEM [ L-QUE -,
             LOCAL.CAT [ HEAD verb,
                         HC-LIGHT - ] ] ].

main-verb-lex := verb-lex & basic-verb-lex & basic-non-wh-word-lex &
  [ SYNSEM [ L-QUE -,
             LOCAL [ CAT [ HEAD.AUX -,
                           VAL [ SPEC < >,
                                 SUBJ < #subj > ] ],
                     CONT.HOOK.XARG #xarg ] ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT cat-sat &
                               [ VAL [ SPR < >,
                                       COMPS < > ] ],
                           CONT.HOOK.INDEX #xarg ] ] ].

aux-lex := verb-lex & basic-icons-lex-item &
  [ SYNSEM [ LOCAL.CAT.HEAD.AUX +,
             L-QUE - ] ].

intransitive-verb-lex := main-verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE real-case ] ] > ].

transitive-verb-lex := main-verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE real-case ] ],
             #comps &
             [ LOCAL.CAT cat-sat &
                         [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun &
                                [ CASE real-case ] ] ] > ].

nom-intransitive-verb-lex := intransitive-verb-lex &
  [ ARG-ST.FIRST.LOCAL.CAT.HEAD noun &
                                [ CASE nom ] ].

nom-acc-transitive-verb-lex := transitive-verb-lex &
  [ ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE nom ] ],
             [ LOCAL.CAT.HEAD noun &
                              [ CASE acc ] ] > ].

Trans_and_Intrans_Verbs-verb-lex := transitive-verb-lex & verb-pc1-rule-dtr & verb-pc10-rule-dtr & verb-pc17-or-verb-pc6-rule-dtr & verb-pc24-rule-dtr & verb-pc26-rule-dtr & verb-pc5-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD.CASE nom,
                           COMPS.FIRST.LOCAL.CAT.HEAD.CASE obl ] ].

Transitive_obl_acc_verb-verb-lex := transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD.CASE obl,
                           COMPS.FIRST.LOCAL.CAT.HEAD.CASE acc ] ].

Verb_negation-verb-lex := intransitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD.CASE nom ].

cisu-verb-lex := transitive-verb-lex.

;;; Auxiliaries

arg-comp-aux := aux-lex & non-local-none-lex-item &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPEC < >,
                             COMPS < #comps . #vcomps >,
                             SUBJ < #subj &
                                    [ LOCAL.CAT.HEAD.CASE real-case ] > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST < #subj &
             [ LOCAL [ CAT [ HEAD noun &
                                  [ CASE #case ],
                             VAL [ SUBJ < >,
                                   SPR < >,
                                   SPEC < >,
                                   COMPS < > ] ],
                       CONT.HOOK.INDEX #xarg ] ],
             #comps &
             [ LIGHT +,
               LOCAL [ CONT.HOOK.XARG #xarg,
                       CAT [ HEAD verb,
                             VAL [ COMPS #vcomps,
                                   SUBJ < [ LOCAL.CAT.HEAD.CASE #case ] > ] ] ] ] > ].

; Somewhat surprisingly, this used to inherit from basic-two-arg (when we had lexical threading), so
; that the non-local features were previously amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Note that raise-sem-lex-item assumes the first complement is
; where the HOOK comes from.  It's not clear to me how you'd
; tell that you had an argument composition auxiliary if it
; wasn't appearing adjacent to the verb.

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

arg-comp-aux-no-pred := arg-comp-aux & raise-sem-lex-item &
  [ ARG-ST < [ ],
             [ LOCAL.CAT.HEAD.AUX - ] > ].

aux1-aux-lex := arg-comp-aux-no-pred &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.TENSE fut,
                   CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ] ].

; Somewhat surprisingly, this used to inherit from basic-two-arg (when we had lexical threading), so
; that the non-local features were previously amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Note that raise-sem-lex-item assumes the first complement is
; where the HOOK comes from.  It's not clear to me how you'd
; tell that you had an argument composition auxiliary if it
; wasn't appearing adjacent to the verb.

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

aux3-aux-lex := arg-comp-aux-no-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ].

; Somewhat surprisingly, this used to inherit from basic-two-arg (when we had lexical threading), so
; that the non-local features were previously amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Note that raise-sem-lex-item assumes the first complement is
; where the HOOK comes from.  It's not clear to me how you'd
; tell that you had an argument composition auxiliary if it
; wasn't appearing adjacent to the verb.

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

aux4-aux-lex := arg-comp-aux-no-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ].

; Somewhat surprisingly, this used to inherit from basic-two-arg (when we had lexical threading), so
; that the non-local features were previously amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Note that raise-sem-lex-item assumes the first complement is
; where the HOOK comes from.  It's not clear to me how you'd
; tell that you had an argument composition auxiliary if it
; wasn't appearing adjacent to the verb.

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

aux5-aux-lex := arg-comp-aux-no-pred &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.ASPECT cmpl,
                   CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ] ].

; Somewhat surprisingly, this used to inherit from basic-two-arg (when we had lexical threading), so
; that the non-local features were previously amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Note that raise-sem-lex-item assumes the first complement is
; where the HOOK comes from.  It's not clear to me how you'd
; tell that you had an argument composition auxiliary if it
; wasn't appearing adjacent to the verb.

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

aux9-aux-lex := arg-comp-aux-no-pred &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.ASPECT cmpl,
                   CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ] ].

; Somewhat surprisingly, this used to inherit from basic-two-arg (when we had lexical threading), so
; that the non-local features were previously amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Note that raise-sem-lex-item assumes the first complement is
; where the HOOK comes from.  It's not clear to me how you'd
; tell that you had an argument composition auxiliary if it
; wasn't appearing adjacent to the verb.

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

aux10-aux-lex := arg-comp-aux-no-pred &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 1st,
                                                                  NUM sg ],
			               COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ] ].

; Somewhat surprisingly, this used to inherit from basic-two-arg (when we had lexical threading), so
; that the non-local features were previously amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Note that raise-sem-lex-item assumes the first complement is
; where the HOOK comes from.  It's not clear to me how you'd
; tell that you had an argument composition auxiliary if it
; wasn't appearing adjacent to the verb.

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

aux11-aux-lex := arg-comp-aux-no-pred &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 2nd,
                                                                  NUM sg ],
			               COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ] ].

; Somewhat surprisingly, this used to inherit from basic-two-arg (when we had lexical threading), so
; that the non-local features were previously amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Note that raise-sem-lex-item assumes the first complement is
; where the HOOK comes from.  It's not clear to me how you'd
; tell that you had an argument composition auxiliary if it
; wasn't appearing adjacent to the verb.

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

aux12-aux-lex := arg-comp-aux-no-pred &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 1st,
                                                                  NUM pl ],
			               COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ] ].

; Somewhat surprisingly, this used to inherit from basic-two-arg (when we had lexical threading), so
; that the non-local features were previously amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Note that raise-sem-lex-item assumes the first complement is
; where the HOOK comes from.  It's not clear to me how you'd
; tell that you had an argument composition auxiliary if it
; wasn't appearing adjacent to the verb.

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

aux13-aux-lex := arg-comp-aux-no-pred &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 3rd,
                                                                  NUM pl ],
			               COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ] ].

; Somewhat surprisingly, this used to inherit from basic-two-arg (when we had lexical threading), so
; that the non-local features were previously amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Note that raise-sem-lex-item assumes the first complement is
; where the HOOK comes from.  It's not clear to me how you'd
; tell that you had an argument composition auxiliary if it
; wasn't appearing adjacent to the verb.

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

aux14-aux-lex := arg-comp-aux-no-pred &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.E.TENSE fut,
			               COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ] ].

; Somewhat surprisingly, this used to inherit from basic-two-arg (when we had lexical threading), so
; that the non-local features were previously amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Note that raise-sem-lex-item assumes the first complement is
; where the HOOK comes from.  It's not clear to me how you'd
; tell that you had an argument composition auxiliary if it
; wasn't appearing adjacent to the verb.

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

aux15-aux-lex := arg-comp-aux-no-pred &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 3rd,
                                                                  NUM sg ],
			               COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ] ].
;;; Adjectives

adj-lex := basic-intersective-adjective-lex.

sad_adj-adj-lex := basic-intersective-adjective-lex .
;  [ SYNSEM.LOCAL.CAT [ POSTHEAD -,
;                       VAL.SUBJ < >,
;                       HEAD.PRD + ] ].

; Basic attributive adjective definition

attr-adj-lex := adj-lex & intersective-mod-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < [ LOCAL.CAT [ HEAD noun,
                                              VAL.SPR cons ] ] > ].
;;; Complementizers

;;; Others



norm-adposition-lex := norm-sem-lex-item & no-hcons-lex-item & basic-intersective-mod-lex & non-local-none-lex-item &
 [ ARG-ST < #comp >,
   SYNSEM [ LKEYS.KEYREL arg12-ev-relation &
                         [ PRED #pred,
                           ARG1 #xarg,
                           ARG2 #ind ],
            L-QUE #lque,
            LOCAL [ CONT.RELS.LIST < [ PRED #pred,
                                       ARG0 event,
                                       ARG1 event-or-ref-index ] >,
                    CONT.HOOK [ XARG #xarg],
                    CAT [ WH.BOOL -,
                          HEAD.MOD < [ LOCAL [ CAT [ HEAD +nv,
						      VAL.SPR cons ],
						CONT.HOOK.INDEX #xarg ]] >,
                          VAL [ SPR < >,
                                SPEC < >,
                                SUBJ <
                                       [ LOCAL [ CONT.HOOK.INDEX #xarg,
                                       CAT [ VAL [ SPR < >,
                                                   COMPS < > ],
                                             HEAD noun & [CASE nom] ] ] ]>,
                                COMPS < #comp &
                                        [ L-QUE #lque,
                                          LOCAL [ CAT [ HEAD noun,
                                                        VAL.SPR < > ],
                                                  CONT.HOOK.INDEX #ind ] ] > ],
                          HEAD adp &
                               [ MOD < [ LOCAL.CAT [ VAL.SPR cons,
                                                     WH.BOOL -,
                                                     HEAD.AUX - ] ] > ] ] ] ] ].




;;; Determiners
;;; SPEC is non-empty, and already specified by basic-determiner-lex.

determiner-lex := basic-determiner-lex & basic-non-wh-word-lex & norm-zero-arg & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < >,
                           COMPS < >,
                           SUBJ < > ] ].

det1-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM.L-QUE - ].

det3-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM [ L-QUE -,
             LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CAT.HEAD.CASE dat ] ].

det4-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM [ L-QUE -,
             LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CAT.HEAD.CASE all ] ].

det5-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM.L-QUE - ].

det6-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM.L-QUE - ].

det7-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM [ L-QUE -,
             LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CAT.HEAD.CASE obl ] ].

det10-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM [ L-QUE -,
             LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CAT.HEAD.CASE pro ] ].

;;; Adverbs

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

;n-bar-predicate-rule := phrase &
;  [ SYNSEM [ LOCAL.CAT [ HEAD verb ] ],
;    C-CONT [ HOOK [ LTOP #ltop,
;		    INDEX #index,
;		    XARG #arg1 ],
;	     RELS.LIST < arg12-ev-relation &
;		   [ PRED "_be_v_id_rel",
;		     LBL #ltop,
;		     ARG0 #index,
;		     ARG1 #arg1,
;		     ARG2 #arg2 ],
;		   quant-relation &
;		   [ PRED "exist_q_rel",
;		     ARG0 #arg2,
;		     RSTR #harg ] >,
;	     HCONS.LIST < qeq & [ HARG #harg, LARG #larg ] > ],
;   ARGS < [ SYNSEM [ LOCAL [ CAT [ HEAD noun ],
;			      CONT.HOOK [ INDEX #arg2,
;	                                  LTOP #larg ]]] ] > ].

n-bar-predicate-rule := unary-phrase & nocoord &
  [ SYNSEM [ LOCAL.CAT [ HEAD verb,
	  	         VAL [ COMPS < >,
	  	          SUBJ < [ LOCAL [ CONT.HOOK.INDEX #arg1,
					         CAT [ HEAD noun,
				                VAL.SPR < >  ] ] ] >] ],
             NON-LOCAL #nl ],
    C-CONT [ HOOK [ LTOP #ltop,
		    INDEX #index,
		    XARG #arg1 ],
	     RELS.LIST < arg12-ev-relation &
		   [ PRED "_be_v_id_rel",
		     LBL #ltop,
		     ARG0 #index,
		     ARG1 #arg1,
		     ARG2 #arg2 ],
		   quant-relation &
		   [ PRED "exist_q_rel",
		     ARG0 #arg2,
		     RSTR #harg ] >,
	     HCONS.LIST < qeq & [ HARG #harg, LARG #larg ] > ],
    ARGS < [ SYNSEM [ LOCAL [ CAT [ HEAD noun,
                          VAL.SPR cons ],
                          CONT.HOOK [ INDEX #arg2,
                                      LTOP #larg ]],
                  NON-LOCAL #nl ]] > ].

;;; Intermediate rule types

verb-pc1-rule-dtr := word-or-lexrule.
noun-pc5-rule-dtr := word-or-lexrule.
verb-pc26-rule-dtr := word-or-lexrule.
verb-pc20-rule-dtr := word-or-lexrule.
verb-pc17-or-verb-pc6-rule-dtr := word-or-lexrule.
noun-pc13-or-noun-pc2-rule-dtr := word-or-lexrule.
noun-pc16-rule-dtr := word-or-lexrule.
noun-pc3-rule-dtr := word-or-lexrule.
verb-pc10-rule-dtr := word-or-lexrule.
verb-pc24-rule-dtr := word-or-lexrule.
noun-pc8-rule-dtr := word-or-lexrule.
verb-pc5-rule-dtr := word-or-lexrule.

;;; Lexical rule types

noun-pc2-lex-rule-super := infl-lex-rule & noun-pc16-rule-dtr & noun-pc5-rule-dtr &
  [ DTR noun-pc13-or-noun-pc2-rule-dtr ].

noun-pc2_lrt1-lex-rule := add-only-no-ccont-rule & noun-pc2-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE obl ].

noun-pc2_lrt2-lex-rule := add-only-no-ccont-rule & noun-pc2-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE dat ].

noun-pc2_lrt4-lex-rule := add-only-no-ccont-rule & noun-pc2-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE abl ].

possessor-lex-rule-1 := head-change-only-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD noun &
                          [ CASE poss-case,
                            POSSESSOR possessor-1 ] ].

OBL_SG_POSSESSIVE-lex-rule := noun-pc2-lex-rule-super & possessor-lex-rule-1.

noun-pc3-lex-rule-super := infl-lex-rule & noun-pc13-or-noun-pc2-rule-dtr & noun-pc16-rule-dtr & noun-pc5-rule-dtr &
  [ DTR noun-pc3-rule-dtr ].

noun-pc3_lrt1-lex-rule := add-only-no-ccont-rule & noun-pc3-lex-rule-super &
  [ SYNSEM.LOCAL [ CAT.HEAD.CASE obl,
                   CONT.HOOK.INDEX.PNG.NUM pl ] ].

noun-pc3_lrt2-lex-rule := add-only-no-ccont-rule & noun-pc3-lex-rule-super &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG.NUM pl,
                   CAT.HEAD.CASE nom ] ].

OBL_PL_POSSESSIVE-lex-rule := noun-pc3-lex-rule-super & possessor-lex-rule-1.

noun-pc5-lex-rule-super := lex-rule & noun-pc16-rule-dtr &
  [ DTR noun-pc5-rule-dtr ].

noun-pc7-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & noun-pc8-rule-dtr &
  [ DTR noun5-noun-lex ].

noun-pc7_lrt1-lex-rule := noun-pc7-lex-rule-super.

noun-pc8-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ DTR noun-pc8-rule-dtr ].

noun-pc8_lrt1-lex-rule := noun-pc8-lex-rule-super.

noun-pc9-lex-rule-super := lex-rule &
  [ DTR noun7-noun-lex ].

noun-pc10-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & noun-pc13-or-noun-pc2-rule-dtr & noun-pc16-rule-dtr & noun-pc3-rule-dtr & noun-pc5-rule-dtr &
  [ DTR noun9-noun-lex ].

noun-pc10_lrt2-lex-rule := noun-pc10-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE pro ].

noun-pc13-lex-rule-super := lex-rule & noun-pc16-rule-dtr & noun-pc5-rule-dtr &
  [ DTR noun-pc13-or-noun-pc2-rule-dtr ].

noun-pc16-lex-rule-super := lex-rule &
  [ DTR noun-pc16-rule-dtr ].

noun-pc18-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ DTR noun10-noun-lex ].

noun-pc18_lrt1-lex-rule := noun-pc18-lex-rule-super.

noun-pc21-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ DTR noun22-noun-lex ].

noun-pc21_lrt1-lex-rule := noun-pc21-lex-rule-super.

noun-pc23-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ DTR noun25-noun-lex ].

noun-pc23_lrt1-lex-rule := noun-pc23-lex-rule-super.

verb-pc1-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & verb-pc17-or-verb-pc6-rule-dtr & verb-pc24-rule-dtr & verb-pc5-rule-dtr &
  [ DTR verb-pc1-rule-dtr ].

verb-pc1_lrt1-lex-rule := verb-pc1-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE pst ].

verb-pc1_lrt2-lex-rule := verb-pc1-lex-rule-super &
  [ SYNSEM.LOCAL [ CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 3rd,
                                                                  NUM sg ],
                   CONT.HOOK.INDEX.E.TENSE npst ] ].

verb-pc4-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ DTR Trans_and_Intrans_Verbs-verb-lex ].

3PL_1PL_NPST_Verb_Suffix-lex-rule := verb-pc4-lex-rule-super &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.TENSE npst,
                   CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ NUM pl,
                                                                  PER 1st-or-3rd ] ] ].

verb-pc5-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & verb-pc17-or-verb-pc6-rule-dtr & verb-pc24-rule-dtr &
  [ DTR verb-pc5-rule-dtr ].

PLPF_Verb_Suffix-lex-rule := verb-pc5-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE plpf ].

Perfective_Verb_Suffix-lex-rule := verb-pc5-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT pfv ].

verb-pc5_lrt3-lex-rule := verb-pc5-lex-rule-super &
  [ SYNSEM.LOCAL [ CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 1st,
                                                                  NUM sg ],
                   CONT.HOOK.INDEX.E.TENSE npst ] ].

verb-pc6-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & verb-pc24-rule-dtr &
  [ DTR verb-pc17-or-verb-pc6-rule-dtr ].

verb-pc6_lrt1-lex-rule := verb-pc6-lex-rule-super.

verb-pc10-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ DTR verb-pc10-rule-dtr ].

verb-pc10_lrt1-lex-rule := verb-pc10-lex-rule-super &
  [ SYNSEM.LOCAL [ CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 2nd,
                                                                  NUM pl ],
                   CONT.HOOK.INDEX.E.TENSE npst ] ].

verb-pc10_lrt2-lex-rule := verb-pc10-lex-rule-super &
  [ SYNSEM.LOCAL [ CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 2nd,
                                                                  NUM sg ],
                   CONT.HOOK.INDEX.E.TENSE npst ] ].

verb-pc11-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & verb-pc1-rule-dtr & verb-pc17-or-verb-pc6-rule-dtr & verb-pc24-rule-dtr & verb-pc5-rule-dtr &
  [ DTR Trans_and_Intrans_Verbs-verb-lex ].

verb-pc11_lrt1-lex-rule := verb-pc11-lex-rule-super.

verb-pc14-lex-rule-super := infl-lex-rule & verb-pc1-rule-dtr & verb-pc17-or-verb-pc6-rule-dtr & verb-pc24-rule-dtr & verb-pc26-rule-dtr & verb-pc5-rule-dtr &
  [ DTR Trans_and_Intrans_Verbs-verb-lex ].

verb-pc14_lrt1-lex-rule := add-only-no-ccont-rule & verb-pc14-lex-rule-super.

; This adds negative semantics to the verb's
; RELS list.

verb-pc14_lrt2-lex-rule := cont-change-only-lex-rule & verb-pc14-lex-rule-super &
  [ C-CONT [ HOOK [ XARG #xarg,
                    LTOP #ltop,
                    INDEX #ind ],
             RELS.LIST < event-relation &
                         [ PRED "neg_rel",
                           LBL #ltop,
                           ARG1 #harg ] >,
             HCONS.LIST < qeq &
                          [ HARG #harg,
                            LARG #larg ] > ],
    SYNSEM.LKEYS #lkeys,
    DTR.SYNSEM [ LKEYS #lkeys,
                 LOCAL [ CONT.HOOK [ XARG #xarg,
                                     INDEX #ind,
                                     LTOP #larg ],
                         CAT.HEAD verb ] ] ].

verb-pc17-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ DTR verb-pc17-or-verb-pc6-rule-dtr ].

verb-pc17_lrt3-lex-rule := verb-pc17-lex-rule-super.

verb-pc17_lrt5-lex-rule := verb-pc17-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE pst ].

verb-pc18-lex-rule-super := cont-change-only-lex-rule & infl-lex-rule & verb-pc10-rule-dtr &
  [ DTR Trans_and_Intrans_Verbs-verb-lex ].

; This adds negative semantics to the verb's
; RELS list.

verb-pc18_lrt1-lex-rule := verb-pc18-lex-rule-super &
  [ C-CONT [ HOOK [ XARG #xarg,
                    LTOP #ltop,
                    INDEX #ind ],
             RELS.LIST < event-relation &
                         [ PRED "neg_rel",
                           LBL #ltop,
                           ARG1 #harg ] >,
             HCONS.LIST < qeq &
                          [ HARG #harg,
                            LARG #larg ] > ],
    SYNSEM.LKEYS #lkeys,
    DTR.SYNSEM [ LKEYS #lkeys,
                 LOCAL [ CONT.HOOK [ XARG #xarg,
                                     INDEX #ind,
                                     LTOP #larg ],
                         CAT.HEAD verb ] ] ].

verb-pc19-lex-rule-super := lex-rule & verb-pc20-rule-dtr &
  [ DTR verb-lex ].

verb-pc20-lex-rule-super := lex-rule &
  [ DTR verb-pc20-rule-dtr ].

verb-pc24-lex-rule-super := lex-rule &
  [ DTR verb-pc24-rule-dtr ].

verb-pc26-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & verb-pc17-or-verb-pc6-rule-dtr & verb-pc24-rule-dtr & verb-pc5-rule-dtr &
  [ DTR verb-pc26-rule-dtr ].

verb-pc26_lrt1-lex-rule := verb-pc26-lex-rule-super.

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

verbal-head-nexus := headed-phrase &
  [ SYNSEM.LOCAL.CAT.HEAD verb ].

head-initial-head-nexus := head-initial &
  [ SYNSEM.LOCAL.CAT.MC #mc & na,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

head-final-head-nexus := head-final &
  [ SYNSEM.LOCAL.CAT.MC bool,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC na ].

head-subj-phrase := decl-head-subj-phrase & head-initial-head-nexus.

subj-head-phrase := decl-head-subj-phrase & head-final-head-nexus.

head-comp-phrase := basic-head-1st-comp-phrase & head-initial-head-nexus.

comp-head-phrase := basic-head-1st-comp-phrase & head-final-head-nexus.

head-comp-phrase-2 := basic-head-2nd-comp-phrase & head-initial-head-nexus.

comp-head-phrase-2 := basic-head-2nd-comp-phrase & head-final-head-nexus.

poss-unary-phrase-1 := poss-unary-phrase &
  [ ARGS < [ SYNSEM.LOCAL [COORD -, CAT.HEAD.POSSESSOR possessor-1 ] ] >,
    SYNSEM.LOCAL.CAT [ HEAD.SPEC-INIT +,
                       VAL.SPEC.FIRST.LOCAL.CAT.POSSESSUM nonpossessive ] ].

poss-unary-phrase := basic-unary-phrase &
  [ SYNSEM [ NON-LOCAL #nonloc,
             LOCAL [ CONT.HOOK #hook,
                     CAT [ HEAD det &
                                [ POSSESSOR possessor ],
                           VAL [ SPR < >,
                                 COMPS < >,
                                 SUBJ < >,
                                 SPEC < [ LOCAL [ CAT [ VAL.COMPS < >,
                                                        HEAD noun &
                                                             [ PRON - ] ],
                                                  CONT.HOOK #hook &
                                                            [ INDEX #possessum &
                                                                    [ COG-ST uniq-id ],
                                                              LTOP #lbl ] ] ] > ] ] ] ],
    C-CONT [ RELS.LIST < arg12-ev-relation &
                         [ PRED "poss_rel",
                           LBL #lbl,
                           ARG1 #possessum,
                           ARG2 #possessor ],
                         quant-relation &
                         [ PRED "exist_q_rel",
                           ARG0 #possessum,
                           RSTR #harg ] >,
             HCONS.LIST < qeq &
                          [ HARG #harg,
                            LARG #lbl ] >,
             ICONS.LIST < > ],
    ARGS < [ SYNSEM [ LOCAL [ CAT [ VAL [ SPR < >,
                                          COMPS < >,
                                          SUBJ < >,
                                          SPEC < > ],
                                    HEAD +np ],
                              CONT.HOOK.INDEX #possessor ],
                      NON-LOCAL #nonloc ] ] > ].

poss-unary-phrase-pron-1 := poss-unary-phrase &
  [ ARGS < [ SYNSEM.LOCAL [COORD -, CAT.HEAD.POSSESSOR possessor-pron-1 ] ] >,
    SYNSEM.LOCAL.CAT [ HEAD.SPEC-INIT +,
                       VAL.SPEC.FIRST.LOCAL.CAT.POSSESSUM nonpossessive ] ].

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS.LIST < [ PRED "exist_q_rel" ] > ].

basic-filler-phrase :+ [ SYNSEM.NON-LOCAL.SLASH.LIST < >,
    ARGS < [ SYNSEM [ LOCAL #slash,
                      NON-LOCAL.SLASH.LIST < > ] ],
           [ SYNSEM.NON-LOCAL.SLASH.LIST < #slash > ] > ].

extracted-subj-phrase := basic-extracted-subj-phrase &
  [ SYNSEM.LOCAL.CAT.HEAD verb ].

;;; Wh-question-related phrasal types

;;;;;;;;;;;;;;;;;;
;;; Coordination
;;;;;;;;;;;;;;;;;;

;;; Coordination Strategy 1

vp1-top-coord-rule := basic-vp-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

vp1-mid-coord-rule := basic-vp-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

vp1-bottom-coord-rule := conj-first-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 2

vp2-top-coord-rule := basic-vp-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

vp2-mid-coord-rule := basic-vp-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

vp2-bottom-coord-rule := conj-first-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

;;; Coordination Strategy 3

vp3-top-coord-rule := basic-vp-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

vp3-mid-coord-rule := basic-vp-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

vp3-bottom-coord-rule := conj-first-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

;;; Coordination Strategy 4

vp4-top-coord-rule := basic-vp-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].

vp4-mid-coord-rule := basic-vp-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].

vp4-bottom-coord-rule := conj-first-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].

;;; Coordination Strategy 5

vp5-top-coord-rule := basic-vp-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "5" ].

vp5-mid-coord-rule := basic-vp-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "5" ].

vp5-bottom-coord-rule := conj-first-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "5" ].

;;; Coordination Strategy 6

vp6-top-coord-rule := basic-vp-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "6" ].

vp6-bottom-coord-rule := unary-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL [ COORD-STRAT "6",
                   COORD-REL.PRED "_and_coord_rel" ] ].

;;; Coordination Strategy 7

np7-top-coord-rule := basic-np-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "7" ].

np7-mid-coord-rule := basic-np-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "7" ].

np7-bottom-coord-rule := conj-first-bottom-coord-rule & np-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "7" ].

;;; Coordination Strategy 8

np8-top-coord-rule := basic-np-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "8" ].

np8-bottom-coord-rule := unary-bottom-coord-rule & np-bottom-coord-phrase &
  [ SYNSEM.LOCAL [ COORD-STRAT "8",
                   COORD-REL.PRED "_and_coord_rel" ] ].

clause :+ [ SYNSEM.NON-LOCAL.QUE.LIST < > ].
