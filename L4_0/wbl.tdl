;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of wbl
;;; created at:
;;;     Fri Jan 22 03:17:00 UTC 2021
;;; based on Matrix customization system version of:
;;;     Thu Sep 17 17:45:01 UTC 2020
;;;
;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

head :+ [ PRON bool,
    AUX bool,
    FORM form ].

+nd :+ [ CASE case ].

inflected :+ [ VERB-PC30-FLAG luk,
    VERB-PC27-FLAG luk,
    VERB-PC28-FLAG luk,
    VERB-PC29-FLAG luk ].

infl-satisfied :+ [ VERB-PC30-FLAG na-or-+,
    VERB-PC27-FLAG na-or-+,
    VERB-PC28-FLAG na-or-+,
    VERB-PC29-FLAG na-or-+ ].

png :+ [ PER person,
    NUM number ].

basic-head-comp-phrase :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

basic-head-opt-subj-phrase :+ [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Case

case := *top*.
nom := case.  ; nom
acc := case.  ; acc
all := case.  ; all
dat := case.  ; dat
abl := case.  ; abl
pro := case.  ; prox
obl+gen := case.
obl := obl+gen.
gen := obl+gen.

;;; Person

person := *top*.
1st := person.
2nd := person.
3rd := person.

;;; Number

number := *top*.
pl := number.
sg := number.

;;; Form

form := *top*.
nonfinite := form.
finite := form.

;;; Tense

npst := tense.
fut := tense.
pst := tense.
plpf := tense.

;;; Aspect

cmpl := aspect.
pfv := aspect.

;;; Mood

oblig := mood.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

noun-lex := basic-noun-lex & basic-non-wh-word-lex & basic-one-arg & no-hcons-lex-item & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < #spr &
                                 [ LOCAL.CAT.HEAD det ] >,
                           COMPS < >,
                           SUBJ < >,
                           SPEC < > ],
    ARG-ST < #spr > ].

noun5-noun-lex := noun-lex & noun-pc8-rule-dtr &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

noun7-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

noun8-noun-lex := noun-lex & noun-pc8-rule-dtr &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

noun9-noun-lex := noun-lex & noun-pc13-or-noun-pc2-rule-dtr & noun-pc16-rule-dtr & noun-pc3-rule-dtr & noun-pc5-rule-dtr &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

noun10-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

noun16-noun-lex := noun-lex & noun-pc13-or-noun-pc2-rule-dtr & noun-pc16-rule-dtr & noun-pc3-rule-dtr & noun-pc5-rule-dtr &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

noun22-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

noun25-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

noun26-noun-lex := noun-lex & noun-pc13-or-noun-pc2-rule-dtr & noun-pc16-rule-dtr & noun-pc3-rule-dtr & noun-pc5-rule-dtr &
  [ SYNSEM.LOCAL.CAT.HEAD.PRON + ].

noun27-noun-lex := noun-lex & NOM_Pronoun_Enclitics-rule-dtr & noun-pc13-or-noun-pc2-rule-dtr & noun-pc16-rule-dtr & noun-pc3-rule-dtr & noun-pc5-rule-dtr &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG [ PER 2nd,
                                         NUM pl ],
                   CAT.HEAD [ PRON +,
                              CASE nom ] ] ].

noun28-noun-lex := noun-lex & noun-pc13-or-noun-pc2-rule-dtr & noun-pc16-rule-dtr & noun-pc3-rule-dtr & noun-pc5-rule-dtr &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG [ PER 1st,
                                         NUM sg ],
                   CAT.HEAD [ PRON +,
                              CASE obl ] ] ].

noun29-noun-lex := noun-lex & NOM_Pronoun_Enclitics-rule-dtr & noun-pc13-or-noun-pc2-rule-dtr & noun-pc16-rule-dtr & noun-pc3-rule-dtr & noun-pc5-rule-dtr &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG [ PER 1st,
                                         NUM pl ],
                   CAT.HEAD [ PRON +,
                              CASE nom ] ] ].

noun30-noun-lex := noun-lex & noun-pc13-or-noun-pc2-rule-dtr & noun-pc16-rule-dtr & noun-pc3-rule-dtr & noun-pc5-rule-dtr &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG [ PER 2nd,
                                         NUM pl ],
                   CAT.HEAD [ PRON +,
                              CASE obl+gen ] ] ].

noun31-noun-lex := noun-lex & noun-pc13-or-noun-pc2-rule-dtr & noun-pc16-rule-dtr & noun-pc3-rule-dtr & noun-pc5-rule-dtr &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG [ PER 2nd,
                                         NUM sg ],
                   CAT.HEAD [ PRON +,
                              CASE obl ] ] ].

noun32-noun-lex := noun-lex & NOM_Pronoun_Enclitics-rule-dtr & noun-pc13-or-noun-pc2-rule-dtr & noun-pc16-rule-dtr & noun-pc3-rule-dtr & noun-pc5-rule-dtr &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG [ PER 2nd,
                                         NUM sg ],
                   CAT.HEAD [ PRON +,
                              CASE nom ] ] ].

noun33-noun-lex := noun-lex & NOM_Pronoun_Enclitics-rule-dtr & noun-pc13-or-noun-pc2-rule-dtr & noun-pc16-rule-dtr & noun-pc3-rule-dtr & noun-pc5-rule-dtr &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG [ PER 1st,
                                         NUM sg ],
                   CAT.HEAD [ PRON +,
                              CASE nom ] ] ].

noun34-noun-lex := noun-lex & noun-pc13-or-noun-pc2-rule-dtr & noun-pc16-rule-dtr & noun-pc3-rule-dtr & noun-pc5-rule-dtr &
  [ SYNSEM.LOCAL.CAT.HEAD.PRON + ].

noun35-noun-lex := noun-lex & noun-pc13-or-noun-pc2-rule-dtr & noun-pc16-rule-dtr & noun-pc3-rule-dtr & noun-pc5-rule-dtr &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG [ PER 1st,
                                         NUM sg ],
                   CAT.HEAD [ PRON +,
                              CASE gen ] ] ].

;;; Verbs

verb-lex := non-mod-lex-item &
  [ SYNSEM [ L-QUE -,
             LOCAL.CAT [ HEAD verb,
                         HC-LIGHT - ] ] ].

main-verb-lex := verb-lex & basic-verb-lex & basic-non-wh-word-lex &
  [ SYNSEM [ L-QUE -,
             LOCAL [ CAT [ HEAD.AUX -,
                           VAL [ SPEC < >,
                                 SUBJ < #subj > ] ],
                     CONT.HOOK.XARG #xarg ] ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT cat-sat &
                               [ VAL [ SPR < >,
                                       COMPS < > ] ],
                           CONT.HOOK.INDEX #xarg ] ] ].

aux-lex := verb-lex &
  [ SYNSEM [ LOCAL.CAT.HEAD.AUX +,
             L-QUE - ] ].

intransitive-verb-lex := main-verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST.FIRST.LOCAL.CAT.HEAD noun ].

transitive-verb-lex := main-verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT cat-sat &
                         [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ] > ].

nom-intransitive-verb-lex := intransitive-verb-lex &
  [ ARG-ST.FIRST.LOCAL.CAT.HEAD noun &
                                [ CASE nom ] ].

nom-acc-transitive-verb-lex := transitive-verb-lex &
  [ ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE nom ] ],
             [ LOCAL.CAT.HEAD noun &
                              [ CASE acc ] ] > ].

verb8-verb-lex := transitive-verb-lex & verb-pc1-rule-dtr & verb-pc10-rule-dtr & verb-pc17-rule-dtr & verb-pc24-rule-dtr & verb-pc26-rule-dtr & verb-pc5-rule-dtr & verb-pc6-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD.CASE nom,
                           COMPS.FIRST.LOCAL.CAT.HEAD.CASE acc ] ].

verb11-verb-lex := transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD.CASE obl,
                           COMPS.FIRST.LOCAL.CAT.HEAD.CASE acc ] ].

verb12-verb-lex := intransitive-verb-lex & verb-pc17-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD.CASE nom ].

verb16-verb-lex := transitive-verb-lex & verb-pc10-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD.CASE nom,
                           COMPS.FIRST.LOCAL.CAT.HEAD.CASE acc ] ].

verb17-verb-lex := transitive-verb-lex & verb-pc20-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD.CASE nom,
                           COMPS.FIRST.LOCAL.CAT.HEAD.CASE acc ] ].

verb19-verb-lex := intransitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD.CASE nom ].

verb45-verb-lex := intransitive-verb-lex & verb-pc24-rule-dtr & verb-pc6-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD.CASE nom ].

verb48-verb-lex := transitive-verb-lex.

verb63-verb-lex := transitive-verb-lex & verb-pc17-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD.CASE nom,
                           COMPS.FIRST.LOCAL.CAT.HEAD.CASE acc ] ].

;;; Auxiliaries

arg-comp-aux := aux-lex & basic-two-arg &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPEC < >,
                             COMPS < #comps . #vcomps >,
                             SUBJ < #subj > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST < #subj &
             [ LOCAL [ CAT [ HEAD noun &
                                  [ CASE #case ],
                             VAL [ SUBJ < >,
                                   SPR < >,
                                   SPEC < >,
                                   COMPS < > ] ],
                       CONT.HOOK.INDEX #xarg ] ],
             #comps &
             [ LIGHT +,
               LOCAL [ CAT [ VAL [ SUBJ < [ LOCAL.CAT.HEAD.CASE #case ] >,
                                   COMPS #vcomps ],
                             HEAD verb ],
                       CONT.HOOK.XARG #xarg ] ] > ].

; Somewhat surprisingly, this inherits from basic-two-arg, so
; that the non-local features are amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Note that raise-sem-lex-item assumes the first complement is
; where the HOOK comes from.  It's not clear to me how you'd
; tell that you had an argument composition auxiliary if it
; wasn't appearing adjacent to the verb.

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

arg-comp-aux-no-pred := arg-comp-aux & raise-sem-lex-item &
  [ ARG-ST < [ ],
             [ LOCAL.CAT.HEAD.AUX - ] > ].

aux1-aux-lex := arg-comp-aux-no-pred &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.TENSE fut,
                   CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ] ].

; Somewhat surprisingly, this inherits from basic-two-arg, so
; that the non-local features are amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Not inheriting from basic-verb-lex, so need to put in
; event-relation by hand here.

arg-comp-aux-with-pred := arg-comp-aux & hcons-lex-item &
  [ SYNSEM [ LOCAL.CONT.HCONS.LIST < qeq &
                                     [ HARG #harg,
                                       LARG #larg ] >,
             LKEYS.KEYREL event-relation &
                          [ ARG1 #harg ] ],
    ARG-ST < [ ],
             [ LOCAL.CONT.HOOK.LTOP #larg ] > ].

aux2-aux-lex := arg-comp-aux-with-pred &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.MOOD oblig,
                   CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ],
    INFLECTED.VERB-PC27-FLAG - ].

; Somewhat surprisingly, this inherits from basic-two-arg, so
; that the non-local features are amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Note that raise-sem-lex-item assumes the first complement is
; where the HOOK comes from.  It's not clear to me how you'd
; tell that you had an argument composition auxiliary if it
; wasn't appearing adjacent to the verb.

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

aux3-aux-lex := arg-comp-aux-no-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ].

; Somewhat surprisingly, this inherits from basic-two-arg, so
; that the non-local features are amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Note that raise-sem-lex-item assumes the first complement is
; where the HOOK comes from.  It's not clear to me how you'd
; tell that you had an argument composition auxiliary if it
; wasn't appearing adjacent to the verb.

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

aux4-aux-lex := arg-comp-aux-no-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ].

; Somewhat surprisingly, this inherits from basic-two-arg, so
; that the non-local features are amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Note that raise-sem-lex-item assumes the first complement is
; where the HOOK comes from.  It's not clear to me how you'd
; tell that you had an argument composition auxiliary if it
; wasn't appearing adjacent to the verb.

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

aux5-aux-lex := arg-comp-aux-no-pred &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.ASPECT cmpl,
                   CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ] ].

; Somewhat surprisingly, this inherits from basic-two-arg, so
; that the non-local features are amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Note that raise-sem-lex-item assumes the first complement is
; where the HOOK comes from.  It's not clear to me how you'd
; tell that you had an argument composition auxiliary if it
; wasn't appearing adjacent to the verb.

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

aux6-aux-lex := arg-comp-aux-no-pred &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.MOOD oblig,
                   CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ],
    INFLECTED.VERB-PC28-FLAG - ].

; Somewhat surprisingly, this inherits from basic-two-arg, so
; that the non-local features are amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Note that raise-sem-lex-item assumes the first complement is
; where the HOOK comes from.  It's not clear to me how you'd
; tell that you had an argument composition auxiliary if it
; wasn't appearing adjacent to the verb.

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

aux7-aux-lex := arg-comp-aux-no-pred &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.MOOD oblig,
                   CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ],
    INFLECTED.VERB-PC29-FLAG - ].

; Somewhat surprisingly, this inherits from basic-two-arg, so
; that the non-local features are amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Note that raise-sem-lex-item assumes the first complement is
; where the HOOK comes from.  It's not clear to me how you'd
; tell that you had an argument composition auxiliary if it
; wasn't appearing adjacent to the verb.

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

aux8-aux-lex := arg-comp-aux-no-pred &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.MOOD oblig,
                   CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ],
    INFLECTED.VERB-PC30-FLAG - ].

; Somewhat surprisingly, this inherits from basic-two-arg, so
; that the non-local features are amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Note that raise-sem-lex-item assumes the first complement is
; where the HOOK comes from.  It's not clear to me how you'd
; tell that you had an argument composition auxiliary if it
; wasn't appearing adjacent to the verb.

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

aux9-aux-lex := arg-comp-aux-no-pred &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.ASPECT cmpl,
                   CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ] ].

;;; Complementizers

;;; Others

;;; Determiners
;;; SPEC is non-empty, and already specified by basic-determiner-lex.

determiner-lex := basic-determiner-lex & basic-non-wh-word-lex & norm-zero-arg & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < >,
                           COMPS < >,
                           SUBJ < > ] ].

det1-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM.L-QUE - ].

det2-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM.L-QUE - ].

det3-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM [ L-QUE -,
             LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CAT.HEAD.CASE dat ] ].

det4-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM [ L-QUE -,
             LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CAT.HEAD.CASE all ] ].

det5-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM.L-QUE - ].

det6-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM.L-QUE - ].

det7-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM [ L-QUE -,
             LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CAT.HEAD.CASE obl ] ].

det8-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM [ L-QUE -,
             LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CAT.HEAD.CASE obl ] ].

det9-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM [ L-QUE -,
             LOCAL.CAT.VAL.SPEC.FIRST.LOCAL [ CONT.HOOK.INDEX.PNG.NUM pl,
                                              CAT.HEAD.CASE obl ] ] ].

det10-determiner-lex := determiner-lex & no-icons-lex-item &
  [ SYNSEM [ L-QUE -,
             LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CAT.HEAD.CASE pro ] ].

;;; Adverbs

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

;;; Intermediate rule types

verb-pc6-rule-dtr := word-or-lexrule.
verb-pc5-rule-dtr := word-or-lexrule.
verb-pc10-rule-dtr := word-or-lexrule.
noun-pc8-rule-dtr := word-or-lexrule.
noun-pc16-rule-dtr := word-or-lexrule.
verb-pc20-rule-dtr := word-or-lexrule.
noun-pc5-rule-dtr := word-or-lexrule.
verb-pc24-rule-dtr := word-or-lexrule.
noun-pc3-rule-dtr := word-or-lexrule.
verb-pc17-rule-dtr := word-or-lexrule.
verb-pc1-rule-dtr := word-or-lexrule.
verb-pc26-rule-dtr := word-or-lexrule.
NOM_Pronoun_Enclitics-rule-dtr := word-or-lexrule.
noun-pc13-or-noun-pc2-rule-dtr := word-or-lexrule.

;;; Lexical rule types

noun-pc2-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & noun-pc16-rule-dtr & noun-pc5-rule-dtr &
  [ INFLECTED #infl,
    DTR noun-pc13-or-noun-pc2-rule-dtr &
        [ INFLECTED #infl ] ].

noun-pc2_lrt1-lex-rule := noun-pc2-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE obl ].

noun-pc2_lrt2-lex-rule := noun-pc2-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE dat ].

noun-pc2_lrt3-lex-rule := noun-pc2-lex-rule-super.

noun-pc2_lrt4-lex-rule := noun-pc2-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE abl ].

noun-pc3-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & noun-pc13-or-noun-pc2-rule-dtr & noun-pc16-rule-dtr & noun-pc5-rule-dtr &
  [ INFLECTED #infl,
    DTR noun-pc3-rule-dtr &
        [ INFLECTED #infl ] ].

noun-pc3_lrt1-lex-rule := noun-pc3-lex-rule-super &
  [ SYNSEM.LOCAL [ CAT.HEAD.CASE obl,
                   CONT.HOOK.INDEX.PNG.NUM pl ] ].

noun-pc3_lrt2-lex-rule := noun-pc3-lex-rule-super &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG.NUM pl,
                   CAT.HEAD.CASE nom ] ].

noun-pc3_lrt3-lex-rule := noun-pc3-lex-rule-super.

noun-pc5-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & noun-pc16-rule-dtr &
  [ INFLECTED #infl,
    DTR noun-pc5-rule-dtr &
        [ INFLECTED #infl ] ].

noun-pc5_lrt1-lex-rule := noun-pc5-lex-rule-super.

noun-pc7-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & noun-pc8-rule-dtr &
  [ INFLECTED #infl,
    DTR noun5-noun-lex &
        [ INFLECTED #infl ] ].

noun-pc7_lrt1-lex-rule := noun-pc7-lex-rule-super.

noun-pc8-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR noun-pc8-rule-dtr &
        [ INFLECTED #infl ] ].

noun-pc8_lrt1-lex-rule := noun-pc8-lex-rule-super.

noun-pc9-lex-rule-super := lex-rule &
  [ INFLECTED #infl,
    DTR noun7-noun-lex &
        [ INFLECTED #infl ] ].

noun-pc10-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & noun-pc13-or-noun-pc2-rule-dtr & noun-pc16-rule-dtr & noun-pc3-rule-dtr & noun-pc5-rule-dtr &
  [ INFLECTED #infl,
    DTR noun9-noun-lex &
        [ INFLECTED #infl ] ].

noun-pc10_lrt1-lex-rule := noun-pc10-lex-rule-super.

noun-pc10_lrt2-lex-rule := noun-pc10-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE pro ].

noun-pc13-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & noun-pc16-rule-dtr & noun-pc5-rule-dtr &
  [ INFLECTED #infl,
    DTR noun-pc13-or-noun-pc2-rule-dtr &
        [ INFLECTED #infl ] ].

noun-pc13_lrt1-lex-rule := noun-pc13-lex-rule-super.

noun-pc16-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR noun-pc16-rule-dtr &
        [ INFLECTED #infl ] ].

noun-pc16_lrt1-lex-rule := noun-pc16-lex-rule-super.

noun-pc18-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR noun10-noun-lex &
        [ INFLECTED #infl ] ].

noun-pc18_lrt1-lex-rule := noun-pc18-lex-rule-super.

noun-pc21-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR noun22-noun-lex &
        [ INFLECTED #infl ] ].

noun-pc21_lrt1-lex-rule := noun-pc21-lex-rule-super.

noun-pc23-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR noun25-noun-lex &
        [ INFLECTED #infl ] ].

noun-pc23_lrt1-lex-rule := noun-pc23-lex-rule-super.

NOM_Pronoun_Enclitics-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR NOM_Pronoun_Enclitics-rule-dtr &
        [ INFLECTED #infl ] ].

1SG_NOM_Enclitic-lex-rule := NOM_Pronoun_Enclitics-lex-rule-super.

2SG_NOM_Enclitic-lex-rule := NOM_Pronoun_Enclitics-lex-rule-super.

1PL_NOM_Enclitic-lex-rule := NOM_Pronoun_Enclitics-lex-rule-super.

2PL_NOM_Enclitic-lex-rule := NOM_Pronoun_Enclitics-lex-rule-super.

verb-pc1-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & verb-pc17-rule-dtr & verb-pc24-rule-dtr & verb-pc5-rule-dtr & verb-pc6-rule-dtr &
  [ INFLECTED #infl,
    DTR verb-pc1-rule-dtr &
        [ INFLECTED #infl ] ].

verb-pc1_lrt1-lex-rule := verb-pc1-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE pst ].

verb-pc1_lrt2-lex-rule := verb-pc1-lex-rule-super &
  [ SYNSEM.LOCAL [ CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 3rd,
                                                                  NUM sg ],
                   CONT.HOOK.INDEX.E.TENSE npst ] ].

verb-pc4-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR verb8-verb-lex &
        [ INFLECTED #infl ] ].

3PL_NPST_Verb_Suffix-lex-rule := verb-pc4-lex-rule-super &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.TENSE npst,
                   CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ NUM pl,
                                                                  PER 3rd ] ] ].

1PL_NPST_VErb_Suffix-lex-rule := verb-pc4-lex-rule-super &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.TENSE npst,
                   CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ NUM pl,
                                                                  PER 1st ] ] ].

verb-pc5-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & verb-pc17-rule-dtr & verb-pc24-rule-dtr & verb-pc6-rule-dtr &
  [ INFLECTED #infl,
    DTR verb-pc5-rule-dtr &
        [ INFLECTED #infl ] ].

PLPF_Verb_Suffix-lex-rule := verb-pc5-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE plpf ].

Perfective_Verb_Suffix-lex-rule := verb-pc5-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT pfv ].

verb-pc5_lrt3-lex-rule := verb-pc5-lex-rule-super &
  [ SYNSEM.LOCAL [ CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 1st,
                                                                  NUM sg ],
                   CONT.HOOK.INDEX.E.TENSE npst ] ].

verb-pc6-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & verb-pc24-rule-dtr &
  [ INFLECTED #infl,
    DTR verb-pc6-rule-dtr &
        [ INFLECTED #infl ] ].

verb-pc6_lrt1-lex-rule := verb-pc6-lex-rule-super.

verb-pc10-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR verb-pc10-rule-dtr &
        [ INFLECTED #infl ] ].

verb-pc10_lrt1-lex-rule := verb-pc10-lex-rule-super &
  [ SYNSEM.LOCAL [ CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 2nd,
                                                                  NUM pl ],
                   CONT.HOOK.INDEX.E.TENSE npst ] ].

verb-pc10_lrt2-lex-rule := verb-pc10-lex-rule-super &
  [ SYNSEM.LOCAL [ CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 2nd,
                                                                  NUM sg ],
                   CONT.HOOK.INDEX.E.TENSE npst ] ].

verb-pc11-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & verb-pc1-rule-dtr & verb-pc17-rule-dtr & verb-pc24-rule-dtr & verb-pc5-rule-dtr & verb-pc6-rule-dtr &
  [ INFLECTED #infl,
    DTR verb8-verb-lex &
        [ INFLECTED #infl ] ].

verb-pc11_lrt1-lex-rule := verb-pc11-lex-rule-super.

verb-pc14-lex-rule-super := infl-lex-rule & verb-pc1-rule-dtr & verb-pc17-rule-dtr & verb-pc24-rule-dtr & verb-pc26-rule-dtr & verb-pc5-rule-dtr & verb-pc6-rule-dtr &
  [ INFLECTED #infl,
    DTR verb8-verb-lex &
        [ INFLECTED #infl ] ].

verb-pc14_lrt1-lex-rule := add-only-no-ccont-rule & verb-pc14-lex-rule-super.

; This adds negative semantics to the verb's
; RELS list.

verb-pc14_lrt2-lex-rule := cont-change-only-lex-rule & verb-pc14-lex-rule-super &
  [ C-CONT [ HOOK [ XARG #xarg,
                    LTOP #ltop,
                    INDEX #ind ],
             RELS.LIST < event-relation &
                         [ PRED "neg_rel",
                           LBL #ltop,
                           ARG1 #harg ] >,
             HCONS.LIST < qeq &
                          [ HARG #harg,
                            LARG #larg ] > ],
    SYNSEM.LKEYS #lkeys,
    DTR.SYNSEM [ LKEYS #lkeys,
                 LOCAL [ CONT.HOOK [ XARG #xarg,
                                     INDEX #ind,
                                     LTOP #larg ],
                         CAT.HEAD verb ] ] ].

verb-pc17-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR verb-pc17-rule-dtr &
        [ INFLECTED #infl ] ].

verb-pc17_lrt2-lex-rule := verb-pc17-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 3rd,
                                                                NUM sg ] ].

verb-pc17_lrt3-lex-rule := verb-pc17-lex-rule-super.

verb-pc17_lrt4-lex-rule := verb-pc17-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE fut ].

verb-pc17_lrt5-lex-rule := verb-pc17-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE pst ].

verb-pc18-lex-rule-super := cont-change-only-lex-rule & infl-lex-rule & verb-pc10-rule-dtr &
  [ INFLECTED #infl,
    DTR verb16-verb-lex &
        [ INFLECTED #infl ] ].

; This adds negative semantics to the verb's
; RELS list.

verb-pc18_lrt1-lex-rule := verb-pc18-lex-rule-super &
  [ C-CONT [ HOOK [ XARG #xarg,
                    LTOP #ltop,
                    INDEX #ind ],
             RELS.LIST < event-relation &
                         [ PRED "neg_rel",
                           LBL #ltop,
                           ARG1 #harg ] >,
             HCONS.LIST < qeq &
                          [ HARG #harg,
                            LARG #larg ] > ],
    SYNSEM.LKEYS #lkeys,
    DTR.SYNSEM [ LKEYS #lkeys,
                 LOCAL [ CONT.HOOK [ XARG #xarg,
                                     INDEX #ind,
                                     LTOP #larg ],
                         CAT.HEAD verb ] ] ].

verb-pc19-lex-rule-super := lex-rule & verb-pc20-rule-dtr &
  [ INFLECTED #infl,
    DTR verb17-verb-lex &
        [ INFLECTED #infl ] ].

verb-pc20-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR verb-pc20-rule-dtr &
        [ INFLECTED #infl ] ].

verb-pc20_lrt1-lex-rule := verb-pc20-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 3rd,
                                                                NUM pl ] ].

verb-pc24-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR verb-pc24-rule-dtr &
        [ INFLECTED #infl ] ].

verb-pc24_lrt1-lex-rule := verb-pc24-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 1st,
                                                                NUM sg ] ].

verb-pc26-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & verb-pc17-rule-dtr & verb-pc24-rule-dtr & verb-pc5-rule-dtr & verb-pc6-rule-dtr &
  [ INFLECTED #infl,
    DTR verb-pc26-rule-dtr &
        [ INFLECTED #infl ] ].

verb-pc26_lrt1-lex-rule := verb-pc26-lex-rule-super.

verb-pc27-lex-rule-super := add-only-no-ccont-rule & const-lex-rule &
  [ INFLECTED [ VERB-PC27-FLAG +,
                VERB-PC30-FLAG #verb-pc30,
                VERB-PC29-FLAG #verb-pc29,
                VERB-PC28-FLAG #verb-pc28 ],
    DTR aux2-aux-lex &
        [ INFLECTED [ VERB-PC30-FLAG #verb-pc30,
                      VERB-PC29-FLAG #verb-pc29,
                      VERB-PC28-FLAG #verb-pc28 ] ] ].

verb-pc27_lrt1-lex-rule := verb-pc27-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 2nd,
                                                                NUM sg ] ].

verb-pc28-lex-rule-super := add-only-no-ccont-rule & const-lex-rule &
  [ INFLECTED [ VERB-PC28-FLAG +,
                VERB-PC30-FLAG #verb-pc30,
                VERB-PC29-FLAG #verb-pc29,
                VERB-PC27-FLAG #verb-pc27 ],
    DTR aux6-aux-lex &
        [ INFLECTED [ VERB-PC30-FLAG #verb-pc30,
                      VERB-PC29-FLAG #verb-pc29,
                      VERB-PC27-FLAG #verb-pc27 ] ] ].

verb-pc28_lrt1-lex-rule := verb-pc28-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 1st,
                                                                NUM sg ] ].

verb-pc29-lex-rule-super := add-only-no-ccont-rule & const-lex-rule &
  [ INFLECTED [ VERB-PC29-FLAG +,
                VERB-PC30-FLAG #verb-pc30,
                VERB-PC28-FLAG #verb-pc28,
                VERB-PC27-FLAG #verb-pc27 ],
    DTR aux7-aux-lex &
        [ INFLECTED [ VERB-PC30-FLAG #verb-pc30,
                      VERB-PC28-FLAG #verb-pc28,
                      VERB-PC27-FLAG #verb-pc27 ] ] ].

verb-pc29_lrt1-lex-rule := verb-pc29-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 2nd,
                                                                NUM sg ] ].

verb-pc30-lex-rule-super := add-only-no-ccont-rule & const-lex-rule &
  [ INFLECTED [ VERB-PC30-FLAG +,
                VERB-PC29-FLAG #verb-pc29,
                VERB-PC28-FLAG #verb-pc28,
                VERB-PC27-FLAG #verb-pc27 ],
    DTR aux8-aux-lex &
        [ INFLECTED [ VERB-PC29-FLAG #verb-pc29,
                      VERB-PC28-FLAG #verb-pc28,
                      VERB-PC27-FLAG #verb-pc27 ] ] ].

verb-pc30_lrt1-lex-rule := verb-pc30-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 2nd,
                                                                NUM pl ] ].

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

comp-head-phrase := basic-head-1st-comp-phrase & head-final.

subj-head-phrase := decl-head-subj-phrase & head-final &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

; Rules for building NPs.  Note that the Matrix uses SPR for
; the specifier of nouns and SUBJ for the subject (specifier) of verbs.

head-spec-phrase := basic-head-spec-phrase & head-final.

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS.LIST < [ PRED "exist_q_rel" ] > ].

basic-filler-phrase :+ [ SYNSEM.NON-LOCAL.SLASH.LIST < >,
    ARGS < [ SYNSEM [ LOCAL #slash,
                      NON-LOCAL.SLASH.LIST < > ] ],
           [ SYNSEM.NON-LOCAL.SLASH.LIST < #slash > ] > ].

extracted-subj-phrase := basic-extracted-subj-phrase &
  [ SYNSEM.LOCAL.CAT.HEAD verb ].

;;; Wh-question-related phrasal types

;;;;;;;;;;;;;;;;;;
;;; Coordination
;;;;;;;;;;;;;;;;;;

;;; Coordination Strategy 1

vp1-top-coord-rule := basic-vp-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

vp1-mid-coord-rule := basic-vp-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

vp1-bottom-coord-rule := conj-first-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 2

vp2-top-coord-rule := basic-vp-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

vp2-mid-coord-rule := basic-vp-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

vp2-bottom-coord-rule := conj-first-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

;;; Coordination Strategy 3

vp3-top-coord-rule := basic-vp-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

vp3-mid-coord-rule := basic-vp-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

vp3-bottom-coord-rule := conj-first-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

;;; Coordination Strategy 4

vp4-top-coord-rule := basic-vp-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].

vp4-mid-coord-rule := basic-vp-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].

vp4-bottom-coord-rule := conj-first-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].

;;; Coordination Strategy 5

vp5-top-coord-rule := basic-vp-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "5" ].

vp5-mid-coord-rule := basic-vp-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "5" ].

vp5-bottom-coord-rule := conj-first-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "5" ].

;;; Coordination Strategy 6

vp6-top-coord-rule := basic-vp-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "6" ].

vp6-bottom-coord-rule := unary-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL [ COORD-STRAT "6",
                   COORD-REL.PRED "_and_coord_rel" ] ].

;;; Coordination Strategy 7

np7-top-coord-rule := basic-np-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "7" ].

np7-mid-coord-rule := basic-np-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "7" ].

np7-bottom-coord-rule := conj-first-bottom-coord-rule & np-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "7" ].

;;; Coordination Strategy 8

np8-top-coord-rule := basic-np-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "8" ].

np8-bottom-coord-rule := unary-bottom-coord-rule & np-bottom-coord-phrase &
  [ SYNSEM.LOCAL [ COORD-STRAT "8",
                   COORD-REL.PRED "_and_coord_rel" ] ].

clause :+ [ SYNSEM.NON-LOCAL.QUE 0-alist &
                         [ LIST < > ] ].
